
"use client";

import { useEffect, useState, useRef, useCallback } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMapEvents, Polyline } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

// Fix default icon Leaflet
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";

delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconUrl: markerIcon.src,
  shadowUrl: markerShadow.src,
});

// Posisi default (Surabaya)
const position = [-7.250445, 112.768845];

// API Key OpenRouteService - PERLU DIGANTI DENGAN API KEY ANDA
const ORS_API_KEY = "YOUR_OPENROUTESERVICE_API_KEY"; // Dapatkan di https://openrouteservice.org/dev/#/signup

// Fungsi untuk membuat custom icon
const createCustomIcon = (iconUrl) =>
  new L.Icon({
    iconUrl,
    iconSize: [30, 30],
    iconAnchor: [15, 30],
    popupAnchor: [0, -30],
  });

// Pemetaan amenity ke ikon khusus
const iconMapping = {
  hospital: createCustomIcon("/hospital-icon.png"),
  clinic: createCustomIcon("/hospital-icon.png"),
  pharmacy: createCustomIcon("/hospital-icon.png"),
  doctors: createCustomIcon("/hospital-icon.png"),
  dentist: createCustomIcon("/hospital-icon.png"),
  veterinary: createCustomIcon("/hospital-icon.png"),
  nursing_home: createCustomIcon("/hospital-icon.png"),
  social_facility: createCustomIcon("/hospital-icon.png"),
  blood_donation: createCustomIcon("/hospital-icon.png"),
};

// Komponen utama
const MapComponent = () => {
  const [places, setPlaces] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [category, setCategory] = useState("");
  const [userLocation, setUserLocation] = useState(null);
  const [selectedPlace, setSelectedPlace] = useState(null);
  const [showTransportOptions, setShowTransportOptions] = useState(false);
  const [routeData, setRouteData] = useState(null);
  const [isLoadingRoute, setIsLoadingRoute] = useState(false);
  const [routeColor, setRouteColor] = useState("#3388ff");
  const [routeInfo, setRouteInfo] = useState(null);
  
  const mapRef = useRef(null);
  const lastBoundsRef = useRef(null);
  const fetchTimeout = useRef(null);

  // Fungsi untuk mengambil data dari Overpass API
  const fetchPlaces = useCallback(async (bounds) => {
    const { _southWest, _northEast } = bounds;
    const bbox = `${_southWest.lat},${_southWest.lng},${_northEast.lat},${_northEast.lng}`;

    if (lastBoundsRef.current === bbox) return;
    lastBoundsRef.current = bbox;

    if (fetchTimeout.current) clearTimeout(fetchTimeout.current);
    fetchTimeout.current = setTimeout(async () => {
      const query = `
        [out:json][timeout:25];
        (
          node["amenity"="hospital"]["name"](${bbox});
          way["amenity"="hospital"]["name"](${bbox});
          relation["amenity"="hospital"]["name"](${bbox});
          
          node["amenity"="clinic"]["name"](${bbox});
          node["amenity"="pharmacy"]["name"](${bbox});
          node["amenity"="doctors"]["name"](${bbox});
          node["amenity"="dentist"]["name"](${bbox});
          node["amenity"="veterinary"]["name"](${bbox});
          node["amenity"="nursing_home"]["name"](${bbox});
          node["amenity"="social_facility"]["name"](${bbox});
          node["amenity"="blood_donation"]["name"](${bbox});
        );
        out geom;`;

      const url = `https://overpass.kumi.systems/api/interpreter?data=${encodeURIComponent(query)}`;

      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();

        // Memproses data dari Overpass API
        const formattedPlaces = data.elements
          .map((place) => {
            if (place.type === "node") {
              return { lat: place.lat, lon: place.lon, tags: place.tags };
            } else if (place.geometry) {
              const avgLat =
                place.geometry.reduce((sum, p) => sum + p.lat, 0) / place.geometry.length;
              const avgLon =
                place.geometry.reduce((sum, p) => sum + p.lon, 0) / place.geometry.length;
              return { lat: avgLat, lon: avgLon, tags: place.tags };
            }
            return null;
          })
          .filter(Boolean);

        setPlaces(formattedPlaces);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    }, 1000); // Debounce 1 detik
  }, []);

  // Fungsi untuk mendapatkan rute menggunakan OpenRouteService
  const getRoute = useCallback(async (transportMode) => {
    if (!userLocation || !selectedPlace) return;

    setIsLoadingRoute(true);
    setRouteData(null);
    setRouteInfo(null);

    let profile;
    let color;
    
    // Set profile dan warna berdasarkan mode transportasi
    switch (transportMode) {
      case 'car':
        profile = 'driving-car';
        color = '#1E88E5';
        break;
      case 'motorcycle':
        profile = 'driving-car'; // OpenRouteService tidak memiliki profil khusus untuk motor
        color = '#43A047';
        break;
      case 'walking':
        profile = 'foot-walking';
        color = '#FFA000';
        break;
      default:
        profile = 'driving-car';
        color = '#3388ff';
    }

    setRouteColor(color);

    try {
      const response = await fetch(
        `https://api.openrouteservice.org/v2/directions/${profile}?api_key=${ORS_API_KEY}`,
        {
          method: 'POST',
          body: JSON.stringify({
            coordinates: [
              [userLocation.lng, userLocation.lat],
              [selectedPlace.lon, selectedPlace.lat]
            ],
            format: 'geojson'
          }),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );

      if (!response.ok) {
        throw new Error(`OpenRouteService API error: ${response.status}`);
      }

      const data = await response.json();
      
      // Ekstrak geometri rute dan informasi
      if (data.features && data.features.length > 0) {
        const route = data.features[0];
        const coordinates = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);
        
        // Ekstrak informasi rute (jarak dan waktu)
        const distance = route.properties.summary.distance; // dalam meter
        const duration = route.properties.summary.duration; // dalam detik
        
        setRouteData(coordinates);
        setRouteInfo({
          distance: (distance / 1000).toFixed(2), // konversi ke km
          duration: Math.round(duration / 60), // konversi ke menit
          transportMode
        });
        
        // Zoom peta untuk menampilkan seluruh rute
        if (mapRef.current) {
          const bounds = L.latLngBounds(coordinates);
          mapRef.current.fitBounds(bounds, { padding: [50, 50] });
        }
      }
    } catch (error) {
      console.error("Error fetching route:", error);
      alert("Gagal mendapatkan rute. Silakan coba lagi.");
    } finally {
      setIsLoadingRoute(false);
      setShowTransportOptions(false);
    }
  }, [userLocation, selectedPlace]);

  // Komponen event handler untuk menangani perubahan batas peta
  const MapEventHandler = () => {
    const map = useMapEvents({
      moveend: () => {
        fetchPlaces(map.getBounds());
      },
      load: () => {
        mapRef.current = map;
        // Get user's current location
        map.locate({ setView: true, maxZoom: 16 });
      },
      locationfound: (e) => {
        setUserLocation(e.latlng);
        
        // Marker untuk lokasi pengguna dengan style khusus
        const userIcon = L.divIcon({
          html: '<div style="background-color: #3388ff; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white;"></div>',
          className: 'user-location-marker',
          iconSize: [16, 16],
          iconAnchor: [8, 8],
        });
        
        L.marker([e.latlng.lat, e.latlng.lng], { icon: userIcon }).addTo(map)
          .bindPopup("Lokasi Anda saat ini").openPopup();
      },
    });

    useEffect(() => {
      if (map) {
        mapRef.current = map;
        fetchPlaces(map.getBounds());
      }
    }, [map]);

    return null;
  };

  // Filter tempat berdasarkan search input dan kategori
  const filteredPlaces = places.filter((place) => {
    const name = place.tags.name?.toLowerCase() || "";
    const amenity = place.tags.amenity?.toLowerCase() || "";
    return (
      (searchQuery === "" || name.includes(searchQuery.toLowerCase())) &&
      (category === "" || amenity === category)
    );
  });

  // Handle marker click
  const handleMarkerClick = (place) => {
    setSelectedPlace(place);
    setShowTransportOptions(true);
    setRouteData(null); // Reset rute saat memilih lokasi baru
    setRouteInfo(null);
  };

  // Fungsi untuk format waktu tempuh
  const formatDuration = (minutes) => {
    if (minutes < 60) {
      return `${minutes} menit`;
    } else {
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      return `${hours} jam ${remainingMinutes} menit`;
    }
  };

  return (
    <div className="relative">
      {/* Search Bar */}
      <div
        className="absolute top-4 left-4 z-50 bg-white p-3 rounded-lg shadow-lg w-72"
        style={{ zIndex: 1000 }}
      >
        <input
          type="text"
          placeholder="Find a place"
          className="w-full p-2 border rounded mb-2"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <select
          className="w-full p-2 border rounded"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
        >
          <option value="">All Category</option>
          <option value="hospital">Hospital</option>
          <option value="clinic">Clinic</option>
          <option value="pharmacy">Pharmacy</option>
          <option value="doctors">Doctor</option>
          <option value="dentist">Dentist</option>
          <option value="veterinary">Veterinary</option>
          <option value="social_facility">Social Facility</option>
          <option value="blood_donation">Blood Donation</option>
          <option value="nursing_home">Nursing Home</option>
        </select>
      </div>

      {/* Route Info Panel */}
      {routeInfo && (
        <div
          className="absolute bottom-4 left-4 z-50 bg-white p-3 rounded-lg shadow-lg w-72"
          style={{ zIndex: 1000 }}
        >
          <h3 className="font-bold">
            {selectedPlace?.tags?.name || "Tujuan"}
          </h3>
          <div className="mt-2">
            <div className="flex items-center">
              <span className="mr-2">🚗</span>
              <span>
                {routeInfo.transportMode === 'car' ? 'Mobil' : 
                 routeInfo.transportMode === 'motorcycle' ? 'Motor' : 'Jalan Kaki'}
              </span>
            </div>
            <div className="flex items-center mt-1">
              <span className="mr-2">📏</span>
              <span>Jarak: {routeInfo.distance} km</span>
            </div>
            <div className="flex items-center mt-1">
              <span className="mr-2">⏱️</span>
              <span>Waktu: {formatDuration(routeInfo.duration)}</span>
            </div>
          </div>
          <button
            className="mt-3 px-3 py-1 bg-red-500 text-white text-sm rounded"
            onClick={() => {
              setRouteData(null);
              setRouteInfo(null);
            }}
          >
            Hapus Rute
          </button>
        </div>
      )}

      {/* Transport Options Modal */}
      {showTransportOptions && (
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-4 rounded-lg shadow-lg z-50"
          style={{ zIndex: 1001 }}
        >
          <h3 className="text-lg font-bold mb-3">
            {selectedPlace?.tags?.name ? `Rute ke ${selectedPlace.tags.name}` : 'Pilih Moda Transportasi'}
          </h3>
          <div className="flex gap-3">
            <button
              onClick={() => getRoute('car')}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
              disabled={isLoadingRoute}
            >
              Mobil
            </button>
            <button
              onClick={() => getRoute('motorcycle')}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
              disabled={isLoadingRoute}
            >
              Motor
            </button>
            <button
              onClick={() => getRoute('walking')}
              className="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 disabled:opacity-50"
              disabled={isLoadingRoute}
            >
              Jalan Kaki
            </button>
          </div>
          {isLoadingRoute && (
            <div className="mt-3 text-center">
              <span className="inline-block w-4 h-4 border-t-2 border-blue-500 rounded-full animate-spin"></span>
              <span className="ml-2">Memuat rute...</span>
            </div>
          )}        </div>
        )}
  
        {/* Peta Utama */}
        <MapContainer center={position} zoom={13} className="h-screen w-full relative">
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
  
          {/* Menampilkan tempat dari Overpass API */}
          {filteredPlaces.map((place, index) => (
            <Marker
              key={index}
              position={[place.lat, place.lon]}
              icon={iconMapping[place.tags.amenity] || L.icon({
                iconUrl: markerIcon.src,
                shadowUrl: markerShadow.src,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34]
              })}
              eventHandlers={{ click: () => handleMarkerClick(place) }}
            >
              <Popup>
                <strong>{place.tags.name || "Tidak ada nama"}</strong>
                <br />
                <span>{place.tags.amenity || "Kategori tidak diketahui"}</span>
              </Popup>
            </Marker>
          ))}
  
          {/* Menampilkan rute jika ada */}
          {routeData && (
            <Polyline positions={routeData} color={routeColor} />
          )}
  
          {/* Event Handler Peta */}
          <MapEventHandler />
        </MapContainer>
      </div>
    );
  };
  
  export default MapComponent;